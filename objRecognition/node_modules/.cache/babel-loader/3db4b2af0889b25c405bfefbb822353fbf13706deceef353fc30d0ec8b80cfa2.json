{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n  /**\n   * `Socket` constructor.\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n    this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n    this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n    this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n    this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n    this._queue = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n   *\n   * @example\n   * const socket = io();\n   *\n   * console.log(socket.active); // true\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   if (reason === \"io server disconnect\") {\n   *     // the disconnection was initiated by the server, you need to manually reconnect\n   *     console.log(socket.active); // false\n   *   }\n   *   // else the socket will automatically try to reconnect\n   *   console.log(socket.active); // true\n   * });\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @example\n   * const socket = io({\n   *   autoConnect: false\n   * });\n   *\n   * socket.connect();\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for {@link connect()}.\n   */\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * socket.send(\"hello\");\n   *\n   * // this is equivalent to\n   * socket.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @example\n   * socket.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the server\n   * socket.emit(\"hello\", \"world\", (val) => {\n   *   // ...\n   * });\n   *\n   * @return self\n   */\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    args.unshift(ev);\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n      return this;\n    }\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {} else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\n   * @private\n   */\n  _registerAckCallback(id, ack) {\n    var _this = this;\n    var _a;\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks[id] = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      ack.apply(_this, [null, ...args]);\n    };\n  }\n  /**\n   * Emits an event and waits for an acknowledgement\n   *\n   * @example\n   * // without timeout\n   * const response = await socket.emitWithAck(\"hello\", \"world\");\n   *\n   * // with a specific timeout\n   * try {\n   *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n   * } catch (err) {\n   *   // the server did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when the server acknowledges the event\n   */\n  emitWithAck(ev) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    // the timeout flag is optional\n    const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n    return new Promise((resolve, reject) => {\n      args.push((arg1, arg2) => {\n        if (withErr) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        } else {\n          return resolve(arg1);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * Add the packet to the queue.\n   * @param args\n   * @private\n   */\n  _addToQueue(args) {\n    var _this2 = this;\n    let ack;\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n    const packet = {\n      id: this.ids++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push(function (err) {\n      if (packet !== _this2._queue[0]) {\n        // the packet has already been acknowledged\n        return;\n      }\n      const hasError = err !== null;\n      if (hasError) {\n        if (packet.tryCount > _this2._opts.retries) {\n          _this2._queue.shift();\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        _this2._queue.shift();\n        if (ack) {\n          for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            responseArgs[_key5 - 1] = arguments[_key5];\n          }\n          ack(null, ...responseArgs);\n        }\n      }\n      packet.pending = false;\n      return _this2._drainQueue();\n    });\n    this._queue.push(packet);\n    this._drainQueue();\n  }\n  /**\n   * Send the first packet of the queue, and wait for an acknowledgement from the server.\n   * @private\n   */\n  _drainQueue() {\n    if (this._queue.length === 0) {\n      return;\n    }\n    const packet = this._queue[0];\n    if (packet.pending) {\n      return;\n    }\n    packet.pending = true;\n    packet.tryCount++;\n    const currentId = this.ids;\n    this.ids = packet.id; // the same id is reused for consecutive retries, in order to allow deduplication on the server side\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n    this.ids = currentId; // restore offset\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  /**\n   * Sends a CONNECT packet to initiate the Socket.IO session.\n   *\n   * @param data\n   * @private\n   */\n  _sendConnectPacket(data) {\n    this.packet({\n      type: PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @param description\n   * @private\n   */\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowlegement.\n   *\n   * @param packet\n   * @private\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n  onconnect(id, pid) {\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid; // defined only if connection state recovery is enabled\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n   *\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   // console.log(reason); prints \"io client disconnect\"\n   * });\n   *\n   * socket.disconnect();\n   *\n   * @return self\n   */\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\n   * Alias for {@link disconnect()}.\n   *\n   * @return self\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * socket.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @example\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n   *\n   * @returns self\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\n   *\n   * @example\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\n   *   if (err) {\n   *     // the server did not acknowledge the event in the given delay\n   *   }\n   * });\n   *\n   * @returns self\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @example\n   * socket.onAny((event, ...args) => {\n   *   console.log(`got ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @example\n   * socket.prependAny((event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * }\n   *\n   * socket.onAny(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAny(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAny();\n   *\n   * @param listener\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.onAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.prependAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * }\n   *\n   * socket.onAnyOutgoing(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAnyOutgoing(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAnyOutgoing();\n   *\n   * @param [listener] - the catch-all listener (optional)\n   */\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\n   * Notify the listeners for each packet sent\n   *\n   * @param packet\n   *\n   * @private\n   */\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n}","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","emitWithAck","withErr","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","hasError","shift","responseArgs","_drainQueue","currentId","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"sources":["/Users/charumathibadrinath/test-webcam/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n        return new Promise((resolve, reject) => {\n            args.push((arg1, arg2) => {\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                }\n                else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this.ids++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @private\n     */\n    _drainQueue() {\n        if (this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        const currentId = this.ids;\n        this.ids = packet.id; // the same id is reused for consecutive retries, in order to allow deduplication on the server side\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n        this.ids = currentId; // restore offset\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}